#encoding:utf-8
#==============================================================================
# ■ CardBattle::Sprite_FadingNumber
#------------------------------------------------------------------------------
# 　漸變數值的精靈
#==============================================================================
module CardBattle
class Sprite_FadingNumber < Sprite_Base
  #--------------------------------------------------------------------------
  # ● 加入增強模組
  #--------------------------------------------------------------------------
  include SpriteDrawer
  #--------------------------------------------------------------------------
  # ● 定義實例變數
  #--------------------------------------------------------------------------
  attr_reader :current_value
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(viewport)
    super(viewport)
    create_bitmap
    clear_fade
  end
  #--------------------------------------------------------------------------
  # ● 建立圖片
  #--------------------------------------------------------------------------
  def create_bitmap
    self.bitmap = Bitmap.new(125,24)
  end
  #--------------------------------------------------------------------------
  # ● 清除漸變
  #--------------------------------------------------------------------------
  def clear_fade
    @hp_steps = []
    @step_inteval = 0
    @last_val = -1
  end
  #--------------------------------------------------------------------------
  # ● 設置數值
  #--------------------------------------------------------------------------
  def set_value(val)
    clear_fade
    redraw_value(val)
  end
  #--------------------------------------------------------------------------
  # ● 重繪數值
  #--------------------------------------------------------------------------
  def redraw_value(val)
    self.bitmap.clear
    @current_value = val
    draw_text(self.bitmap.rect,"#{val}",2)
  end
  #--------------------------------------------------------------------------
  # ● 上升時處理
  #--------------------------------------------------------------------------
  def process_on_increase
  end
  #--------------------------------------------------------------------------
  # ● 下降時處理
  #--------------------------------------------------------------------------
  def process_on_decrease
  end
  #--------------------------------------------------------------------------
  # ● 歸零時處理
  #--------------------------------------------------------------------------
  def process_on_zero
  end
  #--------------------------------------------------------------------------
  # ● Fading中處理
  #--------------------------------------------------------------------------
  def process_on_fading
    Audio.se_play('Audio/SE/' + "Ice1", 100, 150) 
  end
  #--------------------------------------------------------------------------
  # ● 漸進切換數值
  #--------------------------------------------------------------------------
  def set_value_fade(from , to)
    if to > from
      # 上升
      process_on_increase
    else
      # 下降
      process_on_decrease
    end
    
    diff = to - from
    if diff.abs < 30
      # 差距小於30，每次扣1
      step = 1
    else
      # 其餘情況，拆至30個左右step
      step = (diff.abs / 30.0).ceil
    end
    # 產生階段陣列
    clear_fade
    if from < to
       while from < to
         puts "產生：#{from}"
        @hp_steps.push(from)
        from += step
      end    
    else
      while from > to
        puts "產生：#{from}"
        @hp_steps.push(from)
        from -= step
      end
    end
    3.times do 
      @hp_steps.push(to)
    end
  end
  #--------------------------------------------------------------------------
  # ● 釋放
  #--------------------------------------------------------------------------
  def dispose
    super
  end
  #--------------------------------------------------------------------------
  # ● 是否效果中？
  #--------------------------------------------------------------------------
  def effect?
    !@hp_steps.empty? || animation?
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def update
    super
    if !@hp_steps.empty?
      if @step_inteval > 0
        @step_inteval -= 1
      else
        @step_inteval = 2
        val = @hp_steps.shift # 取出新數值
        puts "處理漸變值：#{val}"
        if @last_val != val
          redraw_value(val)
          process_on_fading
          
          @last_val = val
          if val == 0
            process_on_zero
            
          end
        end

      end

    end
  end
end
end
