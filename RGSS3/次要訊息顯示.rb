#encoding:utf-8

=begin
#*******************************************************************************************
#
#   ＊ 次要訊息顯示 ＊
#
#                       for RGSS3
#
#        Ver 1.2.0   2016.6.30
#
#   原作者：魂(Lctseng)，巴哈姆特論壇ID：play123
#   原文發表於：巴哈姆特RPG製作大師哈拉版
#
#   轉載請保留此標籤
#
#   個人小屋連結：http://home.gamer.com.tw/homeindex.php?owner=play123
#
#   主要功能：
#                       一、類似地圖名稱那樣，顯示一些單行訊息，不影響玩家行動
#                       二、隨時呼叫隨時顯示，即使在事件運行中也是如此
#                       三、視窗位置可以自行調整
#
#   更新紀錄：
#    Ver 1.0.0 ：
#    日期：2013.07.23
#    摘要：一、最初版本
#                 二、功能：第一代的次要訊息顯示
#
#
#    Ver 1.0.1 ：
#    日期：2013.07.24
#    摘要：一、新增功能：視窗位置可以自行調整
#
#    Ver 1.1.0 ：
#    日期：2014.10.22
#    摘要：一、新增功能：文字繪製支援特殊字元(例如繪製圖標：使用\\I[編號])
#
#
#    Ver 1.1.1 ：
#    日期：2016.6.30
#    摘要：一、修正與ARPG傷害數字同時存在會噴錯的BUG
#
#
#    Ver 1.2.0 ：
#    日期：2016.6.30
#    摘要：一、修正多行文字會被切開的問題
#
#
#
#    撰寫摘要：一、此腳本修改或重新定義以下類別：
#                          1.Game_Interpreter
#                          2.Game_System
#                          3.Scene_Map
#
#                          二、此腳本新定義以下類別和模組：
#                          1.Lctseng_Sub_Message_Store_Settings
#                          2.Game_SubMessageCollecter
#                          3.Window_SubMessage
#
#                          三、此腳本定義了以下可供修改設定的模組：
#                          1.Lctseng::SubMessage
#
#*******************************************************************************************

=end



#==============================================================================
# ■ Lctseng::SubMessage
#------------------------------------------------------------------------------
# 　次要訊息設定
#==============================================================================

module Lctseng
module SubMessage
  #--------------------------------------------------------------------------
  # ● 設定5個訊息條的位置，可以自行調整各自的xy座標(對齊基準為訊息條左上角
  #      畫面左上角的座標為(0,0)
  #--------------------------------------------------------------------------
  def self.get_xy_by_index(index)
    x = 0
    y = 0
    case index
    when 1 # 一號訊息列
      x = 0
      y = line_height * index
    when 2 # 二號訊息列
      x = 0
      y = line_height * index
    when 3 # 三號訊息列
      x = 0
      y = line_height * index
    when 4 # 四號訊息列
      x = 0
      y = line_height * index
    when 5 # 五號訊息列
      x = 0
      y = line_height * index
    end
    return [x,y]
  end
  #--------------------------------------------------------------------------
  # ● 獲取行高 - 參考訊息條的高，但修改這裡不會影響訊息條的規格
  #--------------------------------------------------------------------------
  def self.line_height
    return 24
  end
  #--------------------------------------------------------------------------
  # ● 獲取標準的邊距尺寸 - 參考訊息條的邊距，但修改這裡不會影響訊息條的規格
  #--------------------------------------------------------------------------
  def self.standard_padding
    return 12
  end

end
end

#*******************************************************************************************
#
#   請勿修改從這裡以下的程式碼，除非你知道你在做什麼！
#   DO NOT MODIFY UNLESS YOU KNOW WHAT TO DO !
#
#*******************************************************************************************
#=======================================
# ● 開啟標記
#------------------------------------------------------------------------------
$Lctseng_Enable_SubMessage = true
#=======================================

#--------------------------------------------------------------------------
# ★ 紀錄腳本資訊
#--------------------------------------------------------------------------
if !$lctseng_scripts
  $lctseng_scripts = {}
end
__script_sym = :sub_message
$lctseng_scripts[__script_sym] = "1.10"

puts "載入腳本：Lctseng - 次要訊息顯示，版本：#{$lctseng_scripts[__script_sym]}"


#==============================================================================
# ■ Lctseng_Sub_Message_Store_Settings
#------------------------------------------------------------------------------
# 　次要訊息儲存設定
#==============================================================================
module Lctseng_Sub_Message_Store_Settings
  #--------------------------------------------------------------------------
  # ● 次要訊息儲存物件
  #--------------------------------------------------------------------------
  def sub_msg_object
    $game_system.sub_msg_object
  end


end


#encoding:utf-8
#==============================================================================
# ■Game_SubMessageCollecter
#------------------------------------------------------------------------------
# 　次要訊息儲存的主要物件
#==============================================================================

class Game_SubMessageCollecter
  #--------------------------------------------------------------------------
  # ● 類變數
  #--------------------------------------------------------------------------
  @@all_dynamic = false
  @@half_dynamic = false
  #--------------------------------------------------------------------------
  # ● 類方法 - 啟動全動態化
  #--------------------------------------------------------------------------
  def self.enable_all_dynamic
    @@all_dynamic = true
  end
  #--------------------------------------------------------------------------
  # ● 類方法 - 關閉全動態化
  #--------------------------------------------------------------------------
  def self.disable_all_dynamic
    @@all_dynamic = false
  end
  #--------------------------------------------------------------------------
  # ● 類方法 - 啟動半動態化
  #--------------------------------------------------------------------------
  def self.enable_half_dynamic
    @@half_dynamic = true
  end
  #--------------------------------------------------------------------------
  # ● 類方法 - 關閉半動態化
  #--------------------------------------------------------------------------
  def self.disable_half_dynamic
    @@half_dynamic = false
  end
  #--------------------------------------------------------------------------
  # ● 常數
  #--------------------------------------------------------------------------
  Current_Max_Slot = 5
  Show_Msg_Delay_Time = 50
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize
    @fix_waiting_array = [] #固定欄位等待訊息陣列
    Current_Max_Slot.times {@fix_waiting_array.push([])}
    @fix_msg_string_slot = ['']*Current_Max_Slot #固定欄位訊息陣列
    @fix_msg_slot_timer = [0]*Current_Max_Slot #固定欄位計時顯示陣列
    @dynamic_msg_queue = [] #動態訊息佇列
    end
  #--------------------------------------------------------------------------
  # ● 準備顯示固定訊息(slot : 所要顯示的欄位(1~Current_Max_Slot)，msg：要顯示的訊息)
  #--------------------------------------------------------------------------
  def prepare_to_show_fix_msg(slot,msg)
    if @@all_dynamic
      prepare_to_show_dynamic_msg(msg)
    elsif @@half_dynamic
      if msg&&msg!=""
        @fix_waiting_array[slot-1].push(msg)
      end
    else
      if msg&&msg!=""&&@fix_msg_slot_timer[slot-1] <= 0
        @fix_msg_string_slot[slot-1] = msg
        @fix_msg_slot_timer[slot-1] = 0
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 準備顯示的動態，將訊息放入佇列(msg：要顯示的訊息)
  #--------------------------------------------------------------------------
  def prepare_to_show_dynamic_msg(msg)
    if msg&&msg!=""
      @dynamic_msg_queue.push(msg)
    end
  end
  #--------------------------------------------------------------------------
  # ● 將半動態訊息放到指定欄位，並添加顯示計時
  #--------------------------------------------------------------------------
  def push_half_dynamic_to_slot(slot)
    if @fix_waiting_array[slot].size > 0
      msg = @fix_waiting_array[slot][0]
      @fix_waiting_array[slot].delete_at(0)
      @fix_msg_string_slot[slot] = msg
      @fix_msg_slot_timer[slot] = Show_Msg_Delay_Time
      return true
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ● 將全動態訊息放到指定欄位，並添加顯示計時
  #--------------------------------------------------------------------------
  def push_dynamic_to_slot(slot)
    if @dynamic_msg_queue.size > 0
      msg = @dynamic_msg_queue[0]
      @dynamic_msg_queue.delete_at(0)
      @fix_msg_string_slot[slot] = msg
      @fix_msg_slot_timer[slot] = Show_Msg_Delay_Time
    end
  end
  #--------------------------------------------------------------------------
  # ● 場景呼叫：更新此物件
  #--------------------------------------------------------------------------
  def update_this_object
    reduce_the_count_for_timer_and_push_dynamic_msg
  end
  #--------------------------------------------------------------------------
  # ● 減少計時陣列的時間，時間到後檢查是否推入動態訊息
  #--------------------------------------------------------------------------
  def reduce_the_count_for_timer_and_push_dynamic_msg
    for i in 0...Current_Max_Slot
      if @fix_msg_slot_timer[i] > 0
        @fix_msg_slot_timer[i] -=1
      else
        if !push_half_dynamic_to_slot(i)
          push_dynamic_to_slot(i)
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 視窗呼叫用：取得對應位置的訊息，並且清除訊息
  #--------------------------------------------------------------------------
  def get_match_msg(index)
    index-= 1
    if index >= 0 && index < Current_Max_Slot
      msg = @fix_msg_string_slot[index]
      @fix_msg_string_slot[index] = ''
      return msg
    end
    return ''
  end

end


#encoding:utf-8
#==============================================================================
# ■ Game_Interpreter
#------------------------------------------------------------------------------
# 　事件指令的解釋器。
#   本類在 Game_Map、Game_Troop、Game_Event 類的內部使用。
#==============================================================================

class Game_Interpreter
  #--------------------------------------------------------------------------
  # ● 混入設定模組
  #--------------------------------------------------------------------------
  include Lctseng_Sub_Message_Store_Settings
  #--------------------------------------------------------------------------
  # ● 要求顯示固定訊息
  #--------------------------------------------------------------------------
  def show_fix_msg(slot,msg)
    sub_msg_object.prepare_to_show_fix_msg(slot,msg.tr("\n",''))
  end
  #--------------------------------------------------------------------------
  # ● 要求顯示動態訊息
  #--------------------------------------------------------------------------
  def show_dynamic_msg(msg)
    sub_msg_object.prepare_to_show_dynamic_msg(msg.tr("\n",''))
  end
end##end class



#encoding:utf-8
#==============================================================================
# ■ Game_System
#------------------------------------------------------------------------------
# 　處理系統附屬數據的類。保存存檔和菜單的禁止狀態之類的數據。
#   本類的實例請參考 $game_system 。
#==============================================================================

class Game_System
  #--------------------------------------------------------------------------
  # ★ 方法重新定義
  #--------------------------------------------------------------------------
  unless $@
    alias lctseng_for_sub_message_Initialize initialize # 初始化對象
  end
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  ## 次要訊息用
  attr_accessor :sub_msg_object
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize
    lctseng_for_sub_message_Initialize
    # 次要訊息用
    @sub_msg_object = Game_SubMessageCollecter.new
  end
end


#==============================================================================
# ■ Window_SubMessage
#------------------------------------------------------------------------------
# 　顯示次要訊息用的視窗。無邊框
#==============================================================================

class Window_SubMessage < Window_Base
  #--------------------------------------------------------------------------
  # ● 混入設定模組
  #--------------------------------------------------------------------------
  include Lctseng_Sub_Message_Store_Settings
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(index)
    x ,y = Lctseng::SubMessage.get_xy_by_index(index)
    super(x, y, window_width, fitting_height(1))
    self.opacity = 0
    self.contents_opacity = 0
    @show_count = 0
    @index = index
    @current_msg = ""
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 獲取窗口的寬度
  #--------------------------------------------------------------------------
  def window_width
    return 360
  end
  #--------------------------------------------------------------------------
  # ● 更新畫面
  #--------------------------------------------------------------------------
  def update
    super
    if @show_count > 0
      update_fadein
      @show_count -= 1
    else
      update_fadeout
    end
    @current_msg = sub_msg_object.get_match_msg(@index)
    if @current_msg != ''
      open
    end
  end
  #--------------------------------------------------------------------------
  # ● 更新淡入
  #--------------------------------------------------------------------------
  def update_fadein
    self.contents_opacity += 16
  end
  #--------------------------------------------------------------------------
  # ● 更新淡出
  #--------------------------------------------------------------------------
  def update_fadeout
    self.contents_opacity -= 16
  end
  #--------------------------------------------------------------------------
  # ● 打開窗口
  #--------------------------------------------------------------------------
  def open
    refresh
    @show_count = 150
    self.contents_opacity = 0
    self
  end
  #--------------------------------------------------------------------------
  # ● 關閉窗口
  #--------------------------------------------------------------------------
  def close
    @show_count = 0
    self
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_background(contents.rect)
    rect = contents.rect
    draw_text_ex(rect.x,rect.y, @current_msg)
  end
  #--------------------------------------------------------------------------
  # ● 繪制背景
  #--------------------------------------------------------------------------
  def draw_background(rect)
    temp_rect = rect.clone
    temp_rect.width /= 2
    contents.gradient_fill_rect(temp_rect, back_color2, back_color1)
    temp_rect.x = temp_rect.width
    contents.gradient_fill_rect(temp_rect, back_color1, back_color2)
  end
  #--------------------------------------------------------------------------
  # ● 獲取背景色 1
  #--------------------------------------------------------------------------
  def back_color1
    Color.new(0, 0, 0, 192)
  end
  #--------------------------------------------------------------------------
  # ● 獲取背景色 2
  #--------------------------------------------------------------------------
  def back_color2
    Color.new(0, 0, 0, 0)
  end
end

#encoding:utf-8
#==============================================================================
# ■ Scene_Map
#------------------------------------------------------------------------------
# 　地圖畫面
#==============================================================================
class Scene_Map < Scene_Base
  #--------------------------------------------------------------------------
  # ● 混入設定模組
  #--------------------------------------------------------------------------
  include Lctseng_Sub_Message_Store_Settings
  #--------------------------------------------------------------------------
  # ● 方法重新定義別名
  #--------------------------------------------------------------------------
  unless $@
    alias lctseng_start start # 開始處理
    alias lctseng_for_sub_message_Update_basic update_basic # 更新畫面（基礎）
    alias lctseng_for_sub_message_Create_all_windows create_all_windows # 生成所有窗口
  end
  #--------------------------------------------------------------------------
  # ● 開始處理  - 重新定義
  #--------------------------------------------------------------------------
  def start
    lctseng_start
    @item_name_delay = [0] * 5
  end
  #--------------------------------------------------------------------------
  # ● 更新畫面（基礎） - 重新定義
  #--------------------------------------------------------------------------
  def update_basic
    lctseng_for_sub_message_Update_basic
    update_sub_msg
  end
  #--------------------------------------------------------------------------
  # ● 更新即時訊息收集物件
  #--------------------------------------------------------------------------
  def update_sub_msg
    sub_msg_object.update_this_object
  end ##end def
  #--------------------------------------------------------------------------
  # ● 生成所有窗口-  重新定義
  #--------------------------------------------------------------------------
  def create_all_windows
    lctseng_for_sub_message_Create_all_windows
    create_item_name_window
  end
  #--------------------------------------------------------------------------
  # ● 生成道具名窗口
  #--------------------------------------------------------------------------
  def  create_item_name_window
    @item_name_window1 = Window_SubMessage.new(1)
    @item_name_window2 = Window_SubMessage.new(2)
    @item_name_window3 = Window_SubMessage.new(3)
    @item_name_window4 = Window_SubMessage.new(4)
    @item_name_window5 = Window_SubMessage.new(5)
  end

end ##end class
