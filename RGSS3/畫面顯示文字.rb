#encoding:utf-8

=begin
*******************************************************************************************

   ＊ 畫面顯示文字 ＊

                       for RGSS3

        Ver 1.02   2014.09.27

   原作者：魂(Lctseng)，巴哈姆特論壇ID：play123
   原文發表於：巴哈姆特RPG製作大師哈拉版
   原為替替"charlotte051(夏洛特‧聖堂祭司)"撰寫的特製版本
   

   轉載請保留此標籤

   個人小屋連結：http://home.gamer.com.tw/homeindex.php?owner=play123

   主要功能：
                       一、在指定的畫面座標上顯示文字
                       二、可控制文字的顯示/隱藏
                       三、可同時顯示多筆文字
                       四、文字內容可顯示RM內建的變數、角色名稱、隊員名稱、貨幣單位
                       五、可設定文字的字型、大小、顏色、粗體(BOLD)、斜體(ITALIC)
                       六、文字的優先度需高於顯示的圖片
                       七、可一個指令隱藏/刷新所有文字
                       

   更新紀錄：
    Ver 0.10 ：
    日期：2014.01.15
    摘要：一、最初版本
                 二、功能：                  
                       一、在指定的畫面座標上顯示文字
                       二、可控制文字的顯示/隱藏
                       三、可同時顯示多筆文字
                       四、文字內容可顯示RM內建的變數、角色名稱、隊員名稱、貨幣單位
                       五、可設定文字的字型、大小、顏色、粗體(BOLD)、斜體(ITALIC)
                       六、文字的優先度需高於顯示的圖片
                三、版本備註：
                      一、切換地圖：保留所有文字
                      二、切換場景(換到選單、除錯畫面之類的)：清除所有文字

   更新紀錄：
    Ver 0.20 ：
    日期：2014.01.18
    摘要：新增功能：                  
                       一、可一個指令隱藏所有文字
                  

   更新紀錄：
    Ver 1.00 ：
    日期：2014.01.30
    摘要：腳本整理：                  
                       一、整合各元件
                       
   更新紀錄：
    Ver 1.01 ：
    日期：2014.07.14
    摘要：錯誤修正：                  
                       一、產生文字之後無法存檔的錯誤
                       
                       
   更新紀錄：
    Ver 1.02 ：
    日期：2014.09.27
    摘要：新增功能：                  
                       一、可一個指令刷新所有文字
                       
                             
                       
                       

    撰寫摘要：一、此腳本修改或重新定義以下類別：
                           1. Game_Interpreter
                           2. Game_System
                           3. Scene_Base
                           
                          
                        二、此腳本新定義以下類別和模組：
                           1. Lctseng::FontSet
                           2. Game_TextOnScreen
                           3. Game_TextUnit
                           4. Sprite_ScreenText
                           5. Spriteset_ScreenText
                          

*******************************************************************************************

=end


module Lctseng
  
module TextOnScreen
end


module FontSet
  Data = {}
  
  #--------------------------------------------------------------------------
  # ● 取得字型
  #--------------------------------------------------------------------------
  def self.get_font(sym)
    Data[sym] || Font.new(Font.default_name)
  end
  #--------------------------------------------------------------------------
  # ● 字型組設定
  #--------------------------------------------------------------------------
  # 一般
  set_sym_name = :normal
  new_instance = Font.new 
  new_instance.name = "標楷體",'Microsoft JhengHei' #字體名稱
  new_instance.size = 20 #字體大小
  new_instance.color = (Color.new(25,25,255,255)) #字體內容顏色(RGB，紅色、綠色、藍色、不透明度)
  new_instance.bold = true #是否粗體字
  new_instance.italic = false #是否斜體字
  new_instance.outline = true #是否繪製文字邊緣
  new_instance.shadow = true #是否繪製陰影
  new_instance.out_color = (Color.new(100,100,100,255)) #文字邊緣顏色(RGB，紅色、綠色、藍色、不透明度)
  Data[set_sym_name] = new_instance
  # 紅色斜體
  set_sym_name = :red
  new_instance = Font.new 
  new_instance.name = 'Microsoft JhengHei' #字體名稱
  new_instance.size = 40 #字體大小
  new_instance.color = (Color.new(255,0,0,255)) #字體內容顏色(RGB，紅色、綠色、藍色、不透明度)
  new_instance.bold = false #是否粗體字
  new_instance.italic = true #是否斜體字
  new_instance.outline = true #是否繪製文字邊緣
  new_instance.shadow = true #是否繪製陰影
  new_instance.out_color = (Color.new(100,100,100,255)) #文字邊緣顏色(RGB，紅色、綠色、藍色、不透明度)
  Data[set_sym_name] = new_instance
  
  
end



end

#*******************************************************************************************
#
#   請勿修改從這裡以下的程式碼，除非你知道你在做什麼！
#   DO NOT MODIFY UNLESS YOU KNOW WHAT TO DO ! 
#
#*******************************************************************************************


#--------------------------------------------------------------------------
# ★ 紀錄腳本資訊
#--------------------------------------------------------------------------
if !$lctseng_scripts  
  $lctseng_scripts = {}
end
$lctseng_scripts[:text_on_screen] = "1.01"

puts "載入腳本：Lctseng - 畫面顯示文字，版本：#{$lctseng_scripts[:text_on_screen]}"




#encoding:utf-8
#==============================================================================
# ■ Game_TextOnScreen
#------------------------------------------------------------------------------
# 　管理畫面文字的總類別
#==============================================================================

class Game_TextOnScreen
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize
    @units = {}
  end
  #--------------------------------------------------------------------------
  # ● 新增一個畫面文字
  #--------------------------------------------------------------------------
  def add_msg(sym,x,y,ori_text,font_sym = :normal)
    # 若此標籤文字已經存在，將原本的刪除
    if @units[sym] && @units[sym].alive?
      @units[sym].kill
    end
    @units[sym] = Game_TextUnit.new(sym,x,y,ori_text,font_sym)
  end
  #--------------------------------------------------------------------------
  # ● 刷新一個畫面文字
  #--------------------------------------------------------------------------
  def refresh_msg(sym)
    if @units[sym]
      @units[sym].refresh
    end
  end
  #--------------------------------------------------------------------------
  # ● 刷新所有畫面文字
  #--------------------------------------------------------------------------
  def refresh_all_msg
    @units.each_value do |unit|
      unit.refresh
    end
  end
  #--------------------------------------------------------------------------
  # ● 顯示一個畫面文字
  #--------------------------------------------------------------------------
  def show_msg(sym)
    if @units[sym]
      @units[sym].show
    end
  end
  #--------------------------------------------------------------------------
  # ● 隱藏一個畫面文字
  #--------------------------------------------------------------------------
  def hide_msg(sym)
    if @units[sym]
      @units[sym].hide_and_kill_sprite
    end
  end
  #--------------------------------------------------------------------------
  # ● 隱藏所有畫面文字
  #--------------------------------------------------------------------------
  def hide_all_msg
    @units.each_value do |unit|
      unit.hide_and_kill_sprite
    end
  end
  #--------------------------------------------------------------------------
  # ● 迭代
  #--------------------------------------------------------------------------
  def each
    @units.each_value {|unit| yield unit } if block_given?
  end
end

#encoding:utf-8
#==============================================================================
# ■ Game_TextUnit
#------------------------------------------------------------------------------
# 　管理畫面文字的單元類別，每一個個體將由一個Sprite負責顯示
#==============================================================================

class Game_TextUnit
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  attr_reader :x
  attr_reader :y
  attr_reader :sym
  attr_reader :ori_text
  attr_reader :sprite
  attr_reader :font
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(*args,&block)
    setup(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 設置
  #--------------------------------------------------------------------------
  def setup(sym,x,y,ori_text,font_sym)
    @sym = sym
    @font_sym = font_sym
    @x = x
    @y = y
    @ori_text = ori_text
    @sprite = nil
    @visible = false
    @dead = false
    @font = Lctseng::FontSet.get_font(font_sym)
  end
  #--------------------------------------------------------------------------
  # ● 儲存至檔案
  #--------------------------------------------------------------------------
  def marshal_dump
    # 儲存精靈、字型以外的物件
    store = {}
    instance_variables.each do |varname|
      next if varname == :@sprite || varname == :@font
      ivar = instance_variable_get(varname)
      store[varname] = ivar
    end
    store
  end
  #--------------------------------------------------------------------------
  # ● 從檔案讀取
  #--------------------------------------------------------------------------
  def marshal_load(obj)
    obj.each_pair do |varname,val|
      instance_variable_set(varname,val)
    end
    # 讀取後處理
    @font = Lctseng::FontSet.get_font(@font_sym)
  end
  #--------------------------------------------------------------------------
  # ● 是否仍存活
  #--------------------------------------------------------------------------
  def alive?
    !@dead
  end
  #--------------------------------------------------------------------------
  # ● 刪除
  #--------------------------------------------------------------------------
  def kill
    return if !alive?
    if @sprite
      @sprite.mark_dead
    end
    @visible = false
    @dead = true
  end
  #--------------------------------------------------------------------------
  # ● 是否有精靈
  #--------------------------------------------------------------------------
  def has_sprite?
    !@sprite.nil?
  end
  #--------------------------------------------------------------------------
  # ● 是否需要顯示
  #--------------------------------------------------------------------------
  def need_show?
    @visible
  end
  #--------------------------------------------------------------------------
  # ● 是否需要精靈
  #--------------------------------------------------------------------------
  def need_sprite?
    !has_sprite? && need_show? && alive?
  end
  #--------------------------------------------------------------------------
  # ● 顯示
  #--------------------------------------------------------------------------
  def show
    @visible = true
  end
  #--------------------------------------------------------------------------
  # ● 隱藏
  #--------------------------------------------------------------------------
  def hide
    @visible = false
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def refresh
    return if !alive?
    return if !has_sprite?
    if @sprite
      @sprite.mark_dead
    end
    lose_sprite
  end
  #--------------------------------------------------------------------------
  # ● 隱藏且清除精靈
  #--------------------------------------------------------------------------
  def hide_and_kill_sprite
    hide
    if @sprite
      @sprite.mark_dead
    end
  end
  #--------------------------------------------------------------------------
  # ● 指派精靈
  #--------------------------------------------------------------------------
  def assign_sprite(sprite)
    @sprite = sprite
  end
  #--------------------------------------------------------------------------
  # ● 失去精靈 (通常是切換場景時)
  #--------------------------------------------------------------------------
  def lose_sprite
    @sprite = nil
  end
end

#encoding:utf-8
#==============================================================================
# ■ Game_Interpreter
#------------------------------------------------------------------------------
# 　事件指令的解釋器。
#   本類在 Game_Map、Game_Troop、Game_Event 類的內部使用。
#==============================================================================

class Game_Interpreter
  #--------------------------------------------------------------------------
  # ● 加入一組畫面文字
  #--------------------------------------------------------------------------
  def add_scr_msg(*args,&block)
    $game_system.scr_text.add_msg(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 顯示某一組畫面文字
  #--------------------------------------------------------------------------
  def show_msg(*args,&block)
    $game_system.scr_text.show_msg(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 隱藏某一組畫面文字
  #--------------------------------------------------------------------------
  def hide_msg(*args,&block)
    $game_system.scr_text.hide_msg(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 刷新某一組畫面文字
  #--------------------------------------------------------------------------
  def refresh_msg(*args,&block)
    $game_system.scr_text.refresh_msg(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 刷新所有畫面文字
  #--------------------------------------------------------------------------
  def refresh_all_msg(*args,&block)
    $game_system.scr_text.refresh_all_msg(*args,&block)
  end
  #--------------------------------------------------------------------------
  # ● 隱藏所有畫面文字
  #--------------------------------------------------------------------------
  def hide_all_msg(*args,&block)
    $game_system.scr_text.hide_all_msg(*args,&block)
  end
end

#encoding:utf-8
#==============================================================================
# ■ Game_System
#------------------------------------------------------------------------------
# 　處理系統附屬數據的類。保存存檔和菜單的禁止狀態之類的數據。
#   本類的實例請參考 $game_system 。
#==============================================================================

class Game_System
  #--------------------------------------------------------------------------
  # ★ 方法重新定義
  #--------------------------------------------------------------------------
  unless @lctseng_for_screen_text_on_Game_System_alias
    alias lctseng_for_screen_text_on_Game_System_for_initialize initialize
    @lctseng_for_screen_text_on_Game_System_alias = true
  end
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  attr_reader :scr_text            # 畫面文字管理器
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(*args,&block)
    lctseng_for_screen_text_on_Game_System_for_initialize(*args,&block)
    @scr_text = Game_TextOnScreen.new
  end
end


#encoding:utf-8
#==============================================================================
# ■ Sprite_ScreenText
#------------------------------------------------------------------------------
# 　顯示一組畫面文字的精靈
#==============================================================================

class Sprite_ScreenText < Sprite
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  attr_reader :text_unit            # 所屬的文字單元
  attr_reader :dead                  # 是否已死的標誌
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(text_unit,viewport = nil)
    super(viewport)
    @text_unit = text_unit
    @dead = false
    self.x = @text_unit.x
    self.y = @text_unit.y
    self.z = 300
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 標誌已死，下一次畫面更新將被精靈組釋放
  #--------------------------------------------------------------------------
  def mark_dead
    @dead = true
    @text_unit = nil
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def refresh
    draw_content
  end
  #--------------------------------------------------------------------------
  # ● 內容高度
  #--------------------------------------------------------------------------
  def contents_height
    return @text_unit.font.size * 2
  end
  #--------------------------------------------------------------------------
  # ● 內容寬度
  #--------------------------------------------------------------------------
  def contents_width
    return Graphics.width
  end
  #--------------------------------------------------------------------------
  # ● 繪製內容
  #--------------------------------------------------------------------------
  def draw_content
    if self.bitmap && !self.bitmap.disposed?
      self.bitmap.dispose
    end
    self.bitmap = Bitmap.new(contents_width,contents_height)
    self.bitmap.font = @text_unit.font
    self.bitmap.draw_text(self.bitmap.rect,process_text(@text_unit.ori_text))
  end
  #--------------------------------------------------------------------------
  # ● 處理文字
  #--------------------------------------------------------------------------
  def process_text(ori_text)
    return convert_escape_characters(ori_text)
  end
  #--------------------------------------------------------------------------
  # ● 進行控制符的事前變換
  #    在實際繪制前、將控制符替換為實際的內容。
  #    為了減少歧異，文字「\」會被首先替換為轉義符（\e）。
  #--------------------------------------------------------------------------
  def convert_escape_characters(text)
    result = text.to_s.clone
    result.gsub!(/\n/)            { "" }
    result.gsub!(/\\/)            { "\e" }
    result.gsub!(/\e\e/)          { "\\" }
    result.gsub!(/\eV\[(\d+)\]/i) { $game_variables[$1.to_i] }
    result.gsub!(/\eV\[(\d+)\]/i) { $game_variables[$1.to_i] }
    result.gsub!(/\eN\[(\d+)\]/i) { actor_name($1.to_i) }
    result.gsub!(/\eP\[(\d+)\]/i) { party_member_name($1.to_i) }
    result.gsub!(/\eG/i)          { Vocab::currency_unit }
    result
  end
  #--------------------------------------------------------------------------
  # ● 獲取第 n 號角色的名字
  #--------------------------------------------------------------------------
  def actor_name(n)
    actor = n >= 1 ? $game_actors[n] : nil
    actor ? actor.name : ""
  end
  #--------------------------------------------------------------------------
  # ● 獲取第 n 號隊伍成員的名字
  #--------------------------------------------------------------------------
  def party_member_name(n)
    actor = n >= 1 ? $game_party.members[n - 1] : nil
    actor ? actor.name : ""
  end
  #--------------------------------------------------------------------------
  # ● 釋放
  #--------------------------------------------------------------------------
  def dispose
    self.bitmap.dispose
    super
  end
end


#encoding:utf-8
#==============================================================================
# ■ Spriteset_ScreenText
#------------------------------------------------------------------------------
# 　掌控整個畫面文字的類，此類一律由Scene直接管理
#==============================================================================
class Spriteset_ScreenText
  #--------------------------------------------------------------------------
  # ● 定義實例變量
  #--------------------------------------------------------------------------
  attr_reader :top_scene # 上層的管理場景
  #--------------------------------------------------------------------------
  # ● 初始化對象
  #--------------------------------------------------------------------------
  def initialize(top_scene,viewport = nil)
    @viewport = viewport
    @top_scene = top_scene
    create_units
  end
  #--------------------------------------------------------------------------
  # ● 清除文字單元
  #--------------------------------------------------------------------------
  def clear_units
    if @text_units
      @text_units.each do | unit | 
        #unit.text_unit.lose_sprite
        unit.text_unit.kill # 目前切換場景會刪除所有文字
        unit.dispose
      end
    end
  end
 #--------------------------------------------------------------------------
  # ● 建立文字單元
  #--------------------------------------------------------------------------
  def create_units
    clear_units
    @text_units = []
  end
  #--------------------------------------------------------------------------
  # ● 更新畫面
  #--------------------------------------------------------------------------
  def update
    update_check_and_assign
    update_sprites
  end
  #--------------------------------------------------------------------------
  # ● 檢查$game_system.scr_text的每一個單元是否已經擁有精靈
  #      若無，則指派一個精靈給予之
  #--------------------------------------------------------------------------
  def update_check_and_assign
    $game_system.scr_text.each do |unit|
      if unit.need_sprite?
        sprite = Sprite_ScreenText.new(unit,@viewport)
        unit.assign_sprite(sprite)
        @text_units.push(sprite)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 更新精靈
  #--------------------------------------------------------------------------
  def update_sprites
    @text_units.each do |sprite|
      ## 釋放已死(所屬文字已不再有效)的精靈
      if sprite.dead
        sprite.dispose
        @text_units.delete(sprite)
      else
        sprite.update
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 釋放
  #--------------------------------------------------------------------------
  def dispose
    clear_units
  end
end

#encoding:utf-8
#==============================================================================
# ■ Scene_Base
#------------------------------------------------------------------------------
# 　游戲中所有 Scene 類（場景類）的父類
#==============================================================================

class Scene_Base
  #--------------------------------------------------------------------------
  # ★ 方法重新定義
  #--------------------------------------------------------------------------
  unless @lctseng_for_screen_text_on_Scene_Base_alias
    alias lctseng_for_screen_text_on_Scene_Base_for_start start # 開始處理
    alias lctseng_for_screen_text_on_Scene_Base_for_update_basic update_basic # 更新畫面 - 基礎
    alias lctseng_for_screen_text_on_Scene_Base_for_terminate terminate # 結束處理
    @lctseng_for_screen_text_on_Scene_Base_alias = true
  end
  #--------------------------------------------------------------------------
  # ● 開始處理 - 重新定義
  #--------------------------------------------------------------------------
  def start(*args,&block)
    lctseng_for_screen_text_on_Scene_Base_for_start(*args,&block)
    @screen_text = Spriteset_ScreenText.new(@viewport)
  end
  #--------------------------------------------------------------------------
  # ● 更新畫面（基礎） - 重新定義
  #--------------------------------------------------------------------------
  def update_basic(*args,&block)
    lctseng_for_screen_text_on_Scene_Base_for_update_basic(*args,&block)
    @screen_text.update
  end
  #--------------------------------------------------------------------------
  # ● 釋放畫面文字
  #--------------------------------------------------------------------------
  def dispose_screen_text
    @screen_text.dispose
  end
  #--------------------------------------------------------------------------
  # ● 結束處理 - 重新定義
  #--------------------------------------------------------------------------
  def terminate(*args,&block)
    Graphics.freeze
    dispose_screen_text
    lctseng_for_screen_text_on_Scene_Base_for_terminate(*args,&block)
  end

end
